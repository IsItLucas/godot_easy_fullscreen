extends Node


## Autoload generated by the "GEFS - Godot Easy Fullscreen" addon.
## This autoload manages all code related to the addon.
## Contributions are welcome! Feel free to open a Pull Request or report issues in the Issues section.


## Emitted when fullscreen changes in any way.
## Use [param enabled] to detect fullscreen.
signal fullscreen_toggled(enabled: bool)

## Emitted when the fullscreen lock changes in anyway.
## Use [param mode] to determine how the fullscreen mode is being locked.
signal fullscreen_locked(mode: LockModes)


## A list of all ways fullscreen can be locked.
enum LockModes {
	## Unlocked. The player can freely get in and out of fullscreen mode.
	UNLOCKED,
	
	## Locks fullscreen to the current mode.
	## If fullscreen is enabled, it will keep enabled.
	## If fullscreen is disabled, it will keep disabled.
	CURRENT,
	
	## Forces the project to run on fullscreen.
	FULLSCREEN,
	
	## Forces the project to run on windowed mode.
	WINDOWED,
}


## Returns `true` or `false` depending on whether the project is running in fullscreen or not.
var is_fullscreen := false

## The current way the fullscreen is being locked.
## Use [method lock] to change and apply it instantly.
var lock_mode := LockModes.UNLOCKED


func _ready() -> void:
	# Make sure this autoload runs even when the game is paused.
	process_mode = Node.PROCESS_MODE_ALWAYS


func _input(event: InputEvent) -> void:
	# Check if the fullscreen button exists.
	var action: String = ProjectSettings.get_setting("godot_easy/fullscreen/action", "fullscreen")
	if not InputMap.has_action(action):
		push_error("Fullscreen keybind \"%s\" doesn't exists." % action)
		return
	
	# Check if the fullscreen button is pressed.
	if not event.is_action_pressed(action):
		return
	
	# Check if the fullscreen button is enabled in the project settings.
	var is_enabled: bool =  ProjectSettings.get_setting("godot_easy/fullscreen/enabled", false)
	if not is_enabled:
		push_warning("Can't toggle fullscreen because its functionality is disabled in the Project Settings.")
		return
	
	# Checks if the fullscreen is not locked.
	if lock_mode != LockModes.UNLOCKED:
		push_warning("Can't toggle fullscreen because it's currently locked to %s." % FullscreenHelper.lock_mode_to_str(lock_mode))
		return
	
	# Check if the fullscreen button is pressed.
	if event.is_action_pressed(action):
		# Toggle fullscreen.
		toggle_fullscreen(not is_fullscreen)


## This method toggles the fullscreen mode.
func toggle_fullscreen(enabled: bool) -> void:
	# Update variables.
	is_fullscreen = enabled
	var debug_log: bool = FullscreenHelper.get_setting("debug_log", true)
	
	# Change mode.
	if is_fullscreen:
		DisplayServer.window_set_mode(DisplayServer.WINDOW_MODE_EXCLUSIVE_FULLSCREEN)
		
		if debug_log:
			print("Fullscreen toggled on.")
	else:
		DisplayServer.window_set_mode(DisplayServer.WINDOW_MODE_WINDOWED)
		
		if debug_log:
			print("Fullscreen toggled off.")
	
	# Emit a signal.
	fullscreen_toggled.emit(is_fullscreen)


## This method changes the fullscreen lock mode and apply the changes instantly.
func lock(mode: LockModes) -> void:
	# Update variables.
	lock_mode = mode
	
	match lock_mode:
		# Enable fullscreen.
		LockModes.FULLSCREEN:
			toggle_fullscreen(true)
		
		# Disable fullscreen.
		LockModes.WINDOWED:
			toggle_fullscreen(false)
	
	# Debug log.
	var debug_log: bool = FullscreenHelper.get_setting("debug_log", true)
	if debug_log:
		print("Locking to %s." % FullscreenHelper.lock_mode_to_str(lock_mode))
